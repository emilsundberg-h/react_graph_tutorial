{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport DefaultEvent from \"./DefaultEvent\";\nimport { libraryVersion, Constants } from \"../utils/Constants\"; // for use in cache events\n\nvar MSAL_CACHE_EVENT_VALUE_PREFIX = \"msal.token\";\nvar MSAL_CACHE_EVENT_NAME = \"msal.cache_event\";\n\nvar createEventKey = function (event) {\n  return event.telemetryCorrelationId + \"-\" + event.eventId + \"-\" + event.eventName;\n};\n\nvar TelemetryManager =\n/** @class */\nfunction () {\n  function TelemetryManager(config, telemetryEmitter) {\n    // correlation Id to list of events\n    this.completedEvents = {}; // event key to event\n\n    this.inProgressEvents = {}; // correlation id to map of eventname to count\n\n    this.eventCountByCorrelationId = {}; // Implement after API EVENT\n\n    this.onlySendFailureTelemetry = false; // TODO THROW if bad options\n\n    this.telemetryPlatform = tslib_1.__assign({\n      sdk: Constants.libraryName,\n      sdkVersion: libraryVersion(),\n      networkInformation: {\n        // @ts-ignore\n        connectionSpeed: navigator && navigator.connection && navigator.connection.effectiveType\n      }\n    }, config.platform);\n    this.clientId = config.clientId;\n    this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;\n    /*\r\n     * TODO, when i get to wiring this through, think about what it means if\r\n     * a developer does not implement telem at all, we still instrument, but telemetryEmitter can be\r\n     * optional?\r\n     */\n\n    this.telemetryEmitter = telemetryEmitter;\n  }\n\n  TelemetryManager.getTelemetrymanagerStub = function (clientId) {\n    var applicationName = \"UnSetStub\";\n    var applicationVersion = \"0.0\";\n\n    var telemetryEmitter = function () {};\n\n    var telemetryPlatform = {\n      applicationName: applicationName,\n      applicationVersion: applicationVersion\n    };\n    var telemetryManagerConfig = {\n      platform: telemetryPlatform,\n      clientId: clientId\n    };\n    return new this(telemetryManagerConfig, telemetryEmitter);\n  };\n\n  TelemetryManager.prototype.startEvent = function (event) {\n    if (!this.telemetryEmitter) {\n      return;\n    }\n\n    var eventKey = createEventKey(event);\n    this.inProgressEvents[eventKey] = event;\n  };\n\n  TelemetryManager.prototype.stopEvent = function (event) {\n    var eventKey = createEventKey(event);\n\n    if (!this.telemetryEmitter || !this.inProgressEvents[eventKey]) {\n      return;\n    }\n\n    event.stop();\n    this.incrementEventCount(event);\n    var completedEvents = this.completedEvents[event.telemetryCorrelationId];\n    this.completedEvents[event.telemetryCorrelationId] = (completedEvents || []).concat([event]);\n    delete this.inProgressEvents[eventKey];\n  };\n\n  TelemetryManager.prototype.flush = function (correlationId) {\n    var _this = this; // If there is only unfinished events should this still return them?\n\n\n    if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {\n      return;\n    }\n\n    var orphanedEvents = this.getOrphanedEvents(correlationId);\n    orphanedEvents.forEach(function (event) {\n      return _this.incrementEventCount(event);\n    });\n    var eventsToFlush = this.completedEvents[correlationId].concat(orphanedEvents);\n    delete this.completedEvents[correlationId];\n    var eventCountsToFlush = this.eventCountByCorrelationId[correlationId];\n    delete this.eventCountByCorrelationId[correlationId]; // TODO add funcitonality for onlyFlushFailures after implementing api event? ??\n\n    if (!eventsToFlush || !eventsToFlush.length) {\n      return;\n    }\n\n    var defaultEvent = new DefaultEvent(this.telemetryPlatform, correlationId, this.clientId, eventCountsToFlush);\n    var eventsWithDefaultEvent = eventsToFlush.concat([defaultEvent]);\n    this.telemetryEmitter(eventsWithDefaultEvent.map(function (e) {\n      return e.get();\n    }));\n  };\n\n  TelemetryManager.prototype.incrementEventCount = function (event) {\n    var _a;\n    /*\r\n     * TODO, name cache event different?\r\n     * if type is cache event, change name\r\n     */\n\n\n    var eventName = event.eventName;\n    var eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];\n\n    if (!eventCount) {\n      this.eventCountByCorrelationId[event.telemetryCorrelationId] = (_a = {}, _a[eventName] = 1, _a);\n    } else {\n      eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;\n    }\n  };\n\n  TelemetryManager.prototype.getOrphanedEvents = function (correlationId) {\n    var _this = this;\n\n    return Object.keys(this.inProgressEvents).reduce(function (memo, eventKey) {\n      if (eventKey.indexOf(correlationId) !== -1) {\n        var event_1 = _this.inProgressEvents[eventKey];\n        delete _this.inProgressEvents[eventKey];\n        return memo.concat([event_1]);\n      }\n\n      return memo;\n    }, []);\n  };\n\n  return TelemetryManager;\n}();\n\nexport default TelemetryManager;","map":{"version":3,"sources":["../../src/telemetry/TelemetryManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import * as tslib_1 from \"tslib\";\r\nimport DefaultEvent from \"./DefaultEvent\";\r\nimport { libraryVersion, Constants } from \"../utils/Constants\";\r\n// for use in cache events\r\nvar MSAL_CACHE_EVENT_VALUE_PREFIX = \"msal.token\";\r\nvar MSAL_CACHE_EVENT_NAME = \"msal.cache_event\";\r\nvar createEventKey = function (event) { return (event.telemetryCorrelationId + \"-\" + event.eventId + \"-\" + event.eventName); };\r\nvar TelemetryManager = /** @class */ (function () {\r\n    function TelemetryManager(config, telemetryEmitter) {\r\n        // correlation Id to list of events\r\n        this.completedEvents = {};\r\n        // event key to event\r\n        this.inProgressEvents = {};\r\n        // correlation id to map of eventname to count\r\n        this.eventCountByCorrelationId = {};\r\n        // Implement after API EVENT\r\n        this.onlySendFailureTelemetry = false;\r\n        // TODO THROW if bad options\r\n        this.telemetryPlatform = tslib_1.__assign({ sdk: Constants.libraryName, sdkVersion: libraryVersion(), networkInformation: {\r\n                // @ts-ignore\r\n                connectionSpeed: navigator && navigator.connection && navigator.connection.effectiveType\r\n            } }, config.platform);\r\n        this.clientId = config.clientId;\r\n        this.onlySendFailureTelemetry = config.onlySendFailureTelemetry;\r\n        /*\r\n         * TODO, when i get to wiring this through, think about what it means if\r\n         * a developer does not implement telem at all, we still instrument, but telemetryEmitter can be\r\n         * optional?\r\n         */\r\n        this.telemetryEmitter = telemetryEmitter;\r\n    }\r\n    TelemetryManager.getTelemetrymanagerStub = function (clientId) {\r\n        var applicationName = \"UnSetStub\";\r\n        var applicationVersion = \"0.0\";\r\n        var telemetryEmitter = function () { };\r\n        var telemetryPlatform = {\r\n            applicationName: applicationName,\r\n            applicationVersion: applicationVersion\r\n        };\r\n        var telemetryManagerConfig = {\r\n            platform: telemetryPlatform,\r\n            clientId: clientId\r\n        };\r\n        return new this(telemetryManagerConfig, telemetryEmitter);\r\n    };\r\n    TelemetryManager.prototype.startEvent = function (event) {\r\n        if (!this.telemetryEmitter) {\r\n            return;\r\n        }\r\n        var eventKey = createEventKey(event);\r\n        this.inProgressEvents[eventKey] = event;\r\n    };\r\n    TelemetryManager.prototype.stopEvent = function (event) {\r\n        var eventKey = createEventKey(event);\r\n        if (!this.telemetryEmitter || !this.inProgressEvents[eventKey]) {\r\n            return;\r\n        }\r\n        event.stop();\r\n        this.incrementEventCount(event);\r\n        var completedEvents = this.completedEvents[event.telemetryCorrelationId];\r\n        this.completedEvents[event.telemetryCorrelationId] = (completedEvents || []).concat([event]);\r\n        delete this.inProgressEvents[eventKey];\r\n    };\r\n    TelemetryManager.prototype.flush = function (correlationId) {\r\n        var _this = this;\r\n        // If there is only unfinished events should this still return them?\r\n        if (!this.telemetryEmitter || !this.completedEvents[correlationId]) {\r\n            return;\r\n        }\r\n        var orphanedEvents = this.getOrphanedEvents(correlationId);\r\n        orphanedEvents.forEach(function (event) { return _this.incrementEventCount(event); });\r\n        var eventsToFlush = this.completedEvents[correlationId].concat(orphanedEvents);\r\n        delete this.completedEvents[correlationId];\r\n        var eventCountsToFlush = this.eventCountByCorrelationId[correlationId];\r\n        delete this.eventCountByCorrelationId[correlationId];\r\n        // TODO add funcitonality for onlyFlushFailures after implementing api event? ??\r\n        if (!eventsToFlush || !eventsToFlush.length) {\r\n            return;\r\n        }\r\n        var defaultEvent = new DefaultEvent(this.telemetryPlatform, correlationId, this.clientId, eventCountsToFlush);\r\n        var eventsWithDefaultEvent = eventsToFlush.concat([defaultEvent]);\r\n        this.telemetryEmitter(eventsWithDefaultEvent.map(function (e) { return e.get(); }));\r\n    };\r\n    TelemetryManager.prototype.incrementEventCount = function (event) {\r\n        var _a;\r\n        /*\r\n         * TODO, name cache event different?\r\n         * if type is cache event, change name\r\n         */\r\n        var eventName = event.eventName;\r\n        var eventCount = this.eventCountByCorrelationId[event.telemetryCorrelationId];\r\n        if (!eventCount) {\r\n            this.eventCountByCorrelationId[event.telemetryCorrelationId] = (_a = {},\r\n                _a[eventName] = 1,\r\n                _a);\r\n        }\r\n        else {\r\n            eventCount[eventName] = eventCount[eventName] ? eventCount[eventName] + 1 : 1;\r\n        }\r\n    };\r\n    TelemetryManager.prototype.getOrphanedEvents = function (correlationId) {\r\n        var _this = this;\r\n        return Object.keys(this.inProgressEvents)\r\n            .reduce(function (memo, eventKey) {\r\n            if (eventKey.indexOf(correlationId) !== -1) {\r\n                var event_1 = _this.inProgressEvents[eventKey];\r\n                delete _this.inProgressEvents[eventKey];\r\n                return memo.concat([event_1]);\r\n            }\r\n            return memo;\r\n        }, []);\r\n    };\r\n    return TelemetryManager;\r\n}());\r\nexport default TelemetryManager;\r\n//# sourceMappingURL=TelemetryManager.js.map"]},"metadata":{},"sourceType":"module"}