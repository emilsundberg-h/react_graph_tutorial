{"ast":null,"code":"/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { AadAuthority } from \"./AadAuthority\";\nimport { AuthorityType } from \"./Authority\";\nimport { ClientConfigurationErrorMessage } from \"../error/ClientConfigurationError\";\nimport { UrlUtils } from \"../utils/UrlUtils\";\n/**\r\n * @hidden\r\n */\n\nvar B2cAuthority =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(B2cAuthority, _super);\n\n  function B2cAuthority(authority, validateAuthority) {\n    var _this = _super.call(this, authority, validateAuthority) || this;\n\n    var urlComponents = UrlUtils.GetUrlComponents(authority);\n    var pathSegments = urlComponents.PathSegments;\n\n    if (pathSegments.length < 3) {\n      throw ClientConfigurationErrorMessage.b2cAuthorityUriInvalidPath;\n    }\n\n    _this.CanonicalAuthority = \"https://\" + urlComponents.HostNameAndPort + \"/\" + pathSegments[0] + \"/\" + pathSegments[1] + \"/\" + pathSegments[2] + \"/\";\n    return _this;\n  }\n\n  Object.defineProperty(B2cAuthority.prototype, \"AuthorityType\", {\n    get: function () {\n      return AuthorityType.B2C;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\r\n   * Returns a promise with the TenantDiscoveryEndpoint\r\n   */\n\n  B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      return tslib_1.__generator(this, function (_a) {\n        if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\n          return [2\n          /*return*/\n          , this.DefaultOpenIdConfigurationEndpoint];\n        }\n\n        throw ClientConfigurationErrorMessage.unsupportedAuthorityValidation;\n      });\n    });\n  };\n\n  B2cAuthority.B2C_PREFIX = \"tfp\";\n  return B2cAuthority;\n}(AadAuthority);\n\nexport { B2cAuthority };","map":{"version":3,"sources":["../../src/authority/B2cAuthority.ts"],"names":[],"mappings":"AAAA;;;;;AAKA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,aAAT,QAA8B,aAA9B;AACA,SAAS,+BAAT,QAAgD,mCAAhD;AACA,SAAS,QAAT,QAAyB,mBAAzB;AAEA;;;;AAGA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAkC,EAAA,OAAA,CAAA,SAAA,CAAA,YAAA,EAAA,MAAA;;AAE9B,WAAA,YAAA,CAAmB,SAAnB,EAAsC,iBAAtC,EAAgE;AAAhE,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,SAAN,EAAiB,iBAAjB,KAAmC,IADvC;;AAEI,QAAM,aAAa,GAAG,QAAQ,CAAC,gBAAT,CAA0B,SAA1B,CAAtB;AAEA,QAAM,YAAY,GAAG,aAAa,CAAC,YAAnC;;AACA,QAAI,YAAY,CAAC,MAAb,GAAsB,CAA1B,EAA6B;AACzB,YAAM,+BAA+B,CAAC,0BAAtC;AACH;;AAED,IAAA,KAAI,CAAC,kBAAL,GAA0B,aAAW,aAAa,CAAC,eAAzB,GAAwC,GAAxC,GAA4C,YAAY,CAAC,CAAD,CAAxD,GAA2D,GAA3D,GAA+D,YAAY,CAAC,CAAD,CAA3E,GAA8E,GAA9E,GAAkF,YAAY,CAAC,CAAD,CAA9F,GAAiG,GAA3H;;AACH;;AAED,EAAA,MAAA,CAAA,cAAA,CAAW,YAAA,CAAA,SAAX,EAAW,eAAX,EAAwB;SAAxB,YAAA;AACI,aAAO,aAAa,CAAC,GAArB;AACH,KAFuB;oBAAA;;AAAA,GAAxB;AAIA;;;;AAGa,EAAA,YAAA,CAAA,SAAA,CAAA,mCAAA,GAAb,YAAA;;;AACI,YAAI,CAAC,KAAK,mBAAN,IAA6B,KAAK,mBAAL,CAAyB,KAAK,+BAAL,CAAqC,eAA9D,CAAjC,EAAiH;AAC7G,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAK,kCAAZ,CAAA;AACH;;AAED,cAAM,+BAA+B,CAAC,8BAAtC;;;AACH,GANY;;AApBC,EAAA,YAAA,CAAA,UAAA,GAAqB,KAArB;AA2BlB,SAAA,YAAA;AAAC,CA5BD,CAAkC,YAAlC,CAAA;;SAAa,Y","sourceRoot":"","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { AadAuthority } from \"./AadAuthority\";\r\nimport { AuthorityType } from \"./Authority\";\r\nimport { ClientConfigurationErrorMessage } from \"../error/ClientConfigurationError\";\r\nimport { UrlUtils } from \"../utils/UrlUtils\";\r\n/**\r\n * @hidden\r\n */\r\nvar B2cAuthority = /** @class */ (function (_super) {\r\n    tslib_1.__extends(B2cAuthority, _super);\r\n    function B2cAuthority(authority, validateAuthority) {\r\n        var _this = _super.call(this, authority, validateAuthority) || this;\r\n        var urlComponents = UrlUtils.GetUrlComponents(authority);\r\n        var pathSegments = urlComponents.PathSegments;\r\n        if (pathSegments.length < 3) {\r\n            throw ClientConfigurationErrorMessage.b2cAuthorityUriInvalidPath;\r\n        }\r\n        _this.CanonicalAuthority = \"https://\" + urlComponents.HostNameAndPort + \"/\" + pathSegments[0] + \"/\" + pathSegments[1] + \"/\" + pathSegments[2] + \"/\";\r\n        return _this;\r\n    }\r\n    Object.defineProperty(B2cAuthority.prototype, \"AuthorityType\", {\r\n        get: function () {\r\n            return AuthorityType.B2C;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Returns a promise with the TenantDiscoveryEndpoint\r\n     */\r\n    B2cAuthority.prototype.GetOpenIdConfigurationEndpointAsync = function () {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\r\n            return tslib_1.__generator(this, function (_a) {\r\n                if (!this.IsValidationEnabled || this.IsInTrustedHostList(this.CanonicalAuthorityUrlComponents.HostNameAndPort)) {\r\n                    return [2 /*return*/, this.DefaultOpenIdConfigurationEndpoint];\r\n                }\r\n                throw ClientConfigurationErrorMessage.unsupportedAuthorityValidation;\r\n            });\r\n        });\r\n    };\r\n    B2cAuthority.B2C_PREFIX = \"tfp\";\r\n    return B2cAuthority;\r\n}(AadAuthority));\r\nexport { B2cAuthority };\r\n//# sourceMappingURL=B2cAuthority.js.map"]},"metadata":{},"sourceType":"module"}